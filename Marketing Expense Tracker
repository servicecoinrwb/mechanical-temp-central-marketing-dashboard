<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marketing Expense Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .modal {
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .modal-content {
            transition: transform 0.3s ease;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800">

    <!-- Main Container -->
    <div class="container mx-auto p-4 sm:p-6 md:p-8 max-w-7xl">
        <!-- Header -->
        <header class="mb-8 text-center">
            <h1 class="text-4xl font-bold text-gray-800">Marketing Expense Tracker</h1>
            <p class="text-lg text-gray-500 mt-2">Monitor and manage your marketing campaign spending effectively.</p>
        </header>

        <!-- Summary & Chart Section -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
            <div class="lg:col-span-1 bg-white p-6 rounded-2xl shadow-md flex flex-col justify-center items-center">
                <h2 class="text-xl font-semibold mb-4 text-gray-700">Total Expenses</h2>
                <p id="totalExpenses" class="text-4xl font-bold text-indigo-600">$0.00</p>
            </div>
            <div class="lg:col-span-2 bg-white p-6 rounded-2xl shadow-md">
                <h2 class="text-xl font-semibold mb-4 text-gray-700 text-center">Expense Breakdown</h2>
                <div class="h-64 flex justify-center items-center">
                    <canvas id="expenseChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Main Content: Table and Actions -->
        <div class="bg-white p-6 rounded-2xl shadow-md">
            <div class="flex flex-col sm:flex-row justify-between items-center mb-6">
                <h2 class="text-2xl font-semibold text-gray-700 mb-4 sm:mb-0">Your Expenses</h2>
                <button id="addExpenseBtn" class="w-full sm:w-auto bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition-transform transform hover:scale-105">
                    Add New Expense
                </button>
            </div>

            <!-- Expenses Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                            <th scope="col" class="relative px-6 py-3">
                                <span class="sr-only">Actions</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="expenseTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Rows will be injected here by JavaScript -->
                    </tbody>
                </table>
                 <div id="no-expenses-message" class="text-center py-10 text-gray-500 hidden">
                    <p class="text-lg">No expenses recorded yet.</p>
                    <p>Click "Add New Expense" to get started!</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Expense Modal -->
    <div id="expenseModal" class="modal fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 invisible opacity-0">
        <div class="modal-content bg-white rounded-2xl shadow-2xl w-full max-w-md p-8 transform scale-95">
            <h2 id="modalTitle" class="text-2xl font-bold mb-6 text-gray-800">Add Expense</h2>
            <form id="expenseForm">
                <input type="hidden" id="expenseId">
                <div class="mb-4">
                    <label for="date" class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                    <input type="date" id="date" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <div class="mb-4">
                    <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <input type="text" id="description" placeholder="e.g., Facebook Ads Campaign" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <div class="mb-4">
                    <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                    <select id="category" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" required>
                        <option value="Social Media">Social Media</option>
                        <option value="Content Creation">Content Creation</option>
                        <option value="SEO">SEO</option>
                        <option value="PPC">PPC Advertising</option>
                        <option value="Email Marketing">Email Marketing</option>
                        <option value="Events">Events</option>
                        <option value="Software">Software/Tools</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="mb-6">
                    <label for="amount" class="block text-sm font-medium text-gray-700 mb-1">Amount ($)</label>
                    <input type="number" id="amount" placeholder="150.00" step="0.01" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" id="cancelBtn" class="px-6 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition">Cancel</button>
                    <button type="submit" id="saveBtn" class="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition">Save</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 invisible opacity-0">
        <div class="modal-content bg-white rounded-2xl shadow-2xl w-full max-w-sm p-8 transform scale-95 text-center">
            <h2 class="text-xl font-bold mb-4 text-gray-800">Confirm Deletion</h2>
            <p class="text-gray-600 mb-6">Are you sure you want to delete this expense? This action cannot be undone.</p>
            <div class="flex justify-center space-x-4">
                <button type="button" id="cancelDeleteBtn" class="px-6 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition">Cancel</button>
                <button type="button" id="confirmDeleteBtn" class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">Delete</button>
            </div>
        </div>
    </div>


    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, collection, onSnapshot, addDoc, updateDoc, deleteDoc, serverTimestamp, query, orderBy } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- CONFIG & INITIALIZATION ---
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "YOUR_API_KEY", authDomain: "YOUR_AUTH_DOMAIN", projectId: "YOUR_PROJECT_ID" };
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);

        let currentUserId = null;
        let expensesCollectionRef = null;
        let unsubscribeExpenses = null;
        let expenseChart = null;
        let expenseToDeleteId = null;


        // --- UI ELEMENTS ---
        const addExpenseBtn = document.getElementById('addExpenseBtn');
        const expenseModal = document.getElementById('expenseModal');
        const deleteModal = document.getElementById('deleteModal');
        const cancelBtn = document.getElementById('cancelBtn');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        const expenseForm = document.getElementById('expenseForm');
        const modalTitle = document.getElementById('modalTitle');
        const expenseTableBody = document.getElementById('expenseTableBody');
        const totalExpensesEl = document.getElementById('totalExpenses');
        const noExpensesMessage = document.getElementById('no-expenses-message');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

        // --- MODAL HANDLING ---
        const openModal = (modal) => {
            modal.classList.remove('invisible', 'opacity-0');
            modal.querySelector('.modal-content').classList.remove('scale-95');
        };

        const closeModal = (modal) => {
            modal.classList.add('invisible', 'opacity-0');
            modal.querySelector('.modal-content').classList.add('scale-95');
        };
        
        addExpenseBtn.addEventListener('click', () => {
            modalTitle.textContent = 'Add New Expense';
            expenseForm.reset();
            document.getElementById('expenseId').value = '';
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date').value = today;
            openModal(expenseModal);
        });
        
        cancelBtn.addEventListener('click', () => closeModal(expenseModal));
        cancelDeleteBtn.addEventListener('click', () => closeModal(deleteModal));


        // --- AUTHENTICATION ---
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                currentUserId = user.uid;
                setupExpenseListener();
            } else {
                try {
                    if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                        await signInWithCustomToken(auth, __initial_auth_token);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Authentication Error: ", error);
                }
            }
        });

        // --- FIRESTORE OPERATIONS ---
        function setupExpenseListener() {
            if (!currentUserId) return;
            if (unsubscribeExpenses) unsubscribeExpenses(); // Unsubscribe from previous listener

            expensesCollectionRef = collection(db, `artifacts/${appId}/users/${currentUserId}/expenses`);
            const q = query(expensesCollectionRef, orderBy('date', 'desc'));

            unsubscribeExpenses = onSnapshot(q, (snapshot) => {
                const expenses = [];
                snapshot.forEach(doc => {
                    expenses.push({ id: doc.id, ...doc.data() });
                });
                renderExpenses(expenses);
                updateSummary(expenses);
                updateChart(expenses);
            }, (error) => {
                console.error("Error fetching expenses: ", error);
            });
        }

        expenseForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!currentUserId) {
                console.error("User not authenticated.");
                return;
            }

            const id = document.getElementById('expenseId').value;
            const expenseData = {
                date: document.getElementById('date').value,
                description: document.getElementById('description').value,
                category: document.getElementById('category').value,
                amount: parseFloat(document.getElementById('amount').value),
                lastUpdated: serverTimestamp()
            };

            try {
                if (id) {
                    // Update existing expense
                    const expenseDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/expenses`, id);
                    await updateDoc(expenseDocRef, expenseData);
                } else {
                    // Add new expense
                    expenseData.createdAt = serverTimestamp();
                    await addDoc(expensesCollectionRef, expenseData);
                }
                closeModal(expenseModal);
                expenseForm.reset();
            } catch (error) {
                console.error("Error saving expense: ", error);
            }
        });
        
        confirmDeleteBtn.addEventListener('click', async () => {
            if (!currentUserId || !expenseToDeleteId) return;
            try {
                const expenseDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/expenses`, expenseToDeleteId);
                await deleteDoc(expenseDocRef);
                expenseToDeleteId = null;
                closeModal(deleteModal);
            } catch(error) {
                console.error("Error deleting expense:", error);
            }
        });

        // --- UI RENDERING ---
        function renderExpenses(expenses) {
            expenseTableBody.innerHTML = '';
            if (expenses.length === 0) {
                 noExpensesMessage.classList.remove('hidden');
            } else {
                noExpensesMessage.classList.add('hidden');
                expenses.forEach(expense => {
                    const tr = document.createElement('tr');
                    tr.classList.add('hover:bg-gray-50');
                    tr.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${expense.date}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${expense.description}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${expense.category}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">$${expense.amount.toFixed(2)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button class="edit-btn text-indigo-600 hover:text-indigo-900 mr-4" data-id="${expense.id}">Edit</button>
                            <button class="delete-btn text-red-600 hover:text-red-900" data-id="${expense.id}">Delete</button>
                        </td>
                    `;
                    expenseTableBody.appendChild(tr);

                    // Add event listeners for edit/delete buttons
                    tr.querySelector('.edit-btn').addEventListener('click', () => {
                        modalTitle.textContent = 'Edit Expense';
                        document.getElementById('expenseId').value = expense.id;
                        document.getElementById('date').value = expense.date;
                        document.getElementById('description').value = expense.description;
                        document.getElementById('category').value = expense.category;
                        document.getElementById('amount').value = expense.amount;
                        openModal(expenseModal);
                    });
                     tr.querySelector('.delete-btn').addEventListener('click', () => {
                        expenseToDeleteId = expense.id;
                        openModal(deleteModal);
                    });
                });
            }
        }

        function updateSummary(expenses) {
            const total = expenses.reduce((sum, exp) => sum + exp.amount, 0);
            totalExpensesEl.textContent = `$${total.toFixed(2)}`;
        }

        function updateChart(expenses) {
            const ctx = document.getElementById('expenseChart').getContext('2d');
            const categories = {};
            
            expenses.forEach(expense => {
                if (categories[expense.category]) {
                    categories[expense.category] += expense.amount;
                } else {
                    categories[expense.category] = expense.amount;
                }
            });

            const labels = Object.keys(categories);
            const data = Object.values(categories);

            const chartColors = [
                '#4F46E5', '#7C3AED', '#EC4899', '#F59E0B', 
                '#10B981', '#3B82F6', '#EF4444', '#6B7280'
            ];

            if (expenseChart) {
                expenseChart.data.labels = labels;
                expenseChart.data.datasets[0].data = data;
                expenseChart.data.datasets[0].backgroundColor = chartColors.slice(0, labels.length);
                expenseChart.update();
            } else {
                expenseChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Expenses by Category',
                            data: data,
                            backgroundColor: chartColors,
                            borderColor: '#FFFFFF',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    boxWidth: 20,
                                    padding: 20,
                                    font: {
                                        family: 'Inter'
                                    }
                                }
                            }
                        },
                        cutout: '60%'
                    }
                });
            }
             if (labels.length === 0) {
                 expenseChart.options.plugins.tooltip.enabled = false;
             } else {
                 expenseChart.options.plugins.tooltip.enabled = true;
             }
             expenseChart.update();
        }
    </script>
</body>
</html>
